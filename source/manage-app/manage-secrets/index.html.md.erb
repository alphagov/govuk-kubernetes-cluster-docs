---
title: Add secrets to your app
weight: 48
last_reviewed_on: 2022-07-12
review_in: 6 months
---

# Add secrets to your app

You can add new [secrets](https://kubernetes.io/docs/concepts/configuration/secret/) to your app on the GOV.UK Kubernetes platform.

Before you create a secret, check whether you need to use a secret or if you should use another method instead, such as [AWS Identity and Access Management (IAM)](https://aws.amazon.com/iam/).

If you decide that you need to use a secret, check if that secret already exists. If the secret does exist, use this secret instead of duplicating it.

If the secret does not already exist, you need to create it. To create a secret, you must:

- [have access to AWS](https://docs.publishing.service.gov.uk/manual/get-started.html#8-get-aws-access)
- create the secret in AWS Secrets Manager
- define an external Kubernetes secret
- use the Kubernetes secret inside the app

## Creating the secret in AWS Secrets Manager

You can create 2 types of secret in AWS Secrets Manager:

- an [AWS managed database](https://aws.amazon.com/getting-started/hands-on/move-to-managed/) secret
- a non-database secret

### Creating an AWS managed database secret

1. [Sign into the AWS Secrets Manager](https://console.aws.amazon.com/console/home?nc2=h_ct&src=header-signin).

    You select either the integration, staging and production environment when you sign in. You must create the secret in all 3 environments.

1. Select __Store a new secret__.

1. Select the appropriate secret type, for example __Credentials for Amazon RDS database__.

1. Enter the __Username__ and __Password__ for the database and select __Next__.

1. Select the database that you want to connect to and select __Next__. [Contact the GOV.UK replatforming team on Slack](https://gds.slack.com/archives/C013F737737) if you are not sure which database you should connect to.

1. Review the secret and then select __Store__.

1. Repeat this process for all 3 environments.

### Creating a non-database secret

1. [Sign into the AWS Secrets Manager](https://console.aws.amazon.com/console/home?nc2=h_ct&src=header-signin).

    You select either the integration, staging and production environment when you sign in. You must create the secret in all 3 environments.

1. Select __Store a new secret__.

1. Select the __Other type of secret__ secret type, enter the secret __Key__ and __Value__, and then select __Next__.
    - __Key__ is a unique identifier for the secret
    - __Value__ is the secret you want to store

1. Enter the __Secret name__. You should also enter a __Description__.

    Make sure the description is consistent with the `<DESCRIPTION>` in the `.yaml` file you created in the previous step.

___DONT FORGET ABOUT THIS!!!___

1. Add a __Tag__. Enter `added-manually` into the __Key__ field, and `true` into the __Value__ field, and select __Next__.

1. Make sure __Automatic rotation__ is not enabled and select __Next__.

1. Review the secret and then select __Store__.

1. Repeat this process for all 3 environments.

## Defining an external Kubernetes secret

The external Kubernetes secret defines the mapping between the AWS Secrets Manager secret and the Kubernetes secret.

1. Go to the [`external-secrets` folder in the `govuk-helm-charts` repo](https://github.com/alphagov/govuk-helm-charts/tree/main/charts/govuk-apps-conf/templates/external-secrets).

1. Select your app's folder, or create the folder if necessary.

1. Create a new `.yaml` file with a descriptive name.

    You should follow the same naming conventions as existing `.yaml` files:
    - use lowercase
    - put hyphens between words
    - do not include the app name

1. Enter the secret into the file, using the following format:

    ```
    apiVersion: external-secrets.io/v1beta1
    kind: ExternalSecret
    metadata:
      name: <APPNAME-SECRETNAME>
      labels:
        {{- include "govuk-apps-conf.labels" . | nindent 4 }}
      annotations:
        kubernetes.io/description: >
          <DESCRIPTION>
    spec:
      refreshInterval: {{ .Values.externalSecrets.refreshInterval }}
      secretStoreRef:
        name: aws-secretsmanager
        kind: ClusterSecretStore
      target:
        name: <APPNAME>
      dataFrom:
        - extract:
            key: govuk/<APPNAME>/<SECRETNAME>
    ```
    Where `<APPNAME>` is the name of the app and `<SECRETNAME>` is the name of the secret.

    `<DESCRIPTION>` should describe what the secret is used for and where to obtain the secret value. If the `ExternalSecret` uses `dataFrom.extract`, then the description should also document the fields expected in the YAML structure.

    For example, to create a secret for the Elections API for the [GOV.UK Frontend app](https://github.com/alphagov/govuk-frontend):

    ```
    apiVersion: external-secrets.io/v1beta1
    kind: ExternalSecret
    metadata:
      name: frontend-elections-api
      labels:
        {{- include "govuk-apps-conf.labels" . | nindent 4 }}
      annotations:
        kubernetes.io/description: >
          Credentials used by Frontend to access external Elections API service. Field names are "key" for the API key and "url" for the endpoint URL of the Elections API.
    spec:
      refreshInterval: {{ .Values.externalSecrets.refreshInterval }}
      secretStoreRef:
        name: aws-secretsmanager
        kind: ClusterSecretStore
      target:
        name: frontend-elections-api
      dataFrom:
        - extract:
            key: govuk/frontend/elections-api
    ```

1. Save the `.yaml` file and merge the change.

1. Check the Argo CD dashboard for the following environments to find out whether you successfully changed the `govuk-apps-conf` chart:
    - [integration](https://argo.eks.integration.govuk.digital/applications/govuk-apps-conf)
    - [staging](https://argo.eks.staging.govuk.digital/applications/govuk-apps-conf)
    - [production](https://argo.eks.production.govuk.digital/applications/govuk-apps-conf)

## Using the Kubernetes secret inside the app

1. Go to the [`argocd-apps` folder in the `govuk-helm-charts` repo](https://github.com/alphagov/govuk-helm-charts/tree/main/charts/argocd-apps).

1. Select the `values-<ENVIRONMENT>.yaml` file that you want. For example, select the `values-integration.yaml` for the integration environment.

1. In this `.yaml` file, find the app that you are adding a secret to, or create the app if necessary.

1. Enter the secret into the file, using the following format:

    ```
    - name: <SECRETNAME>
            valueFrom:
              secretKeyRef:
                name: <APPNAME-SECRETNAME>
                key: <KEY>
    ```

    The `<SECRETNAME>` in this file must match the `<SECRETNAME>` in the `.yaml` file in the [`external-secrets` folder in the `govuk-helm-charts` repo](https://github.com/alphagov/govuk-helm-charts/tree/main/charts/govuk-apps-conf/templates/external-secrets).

    The `<KEY>` must match the __Key__ in the AWS Secrets Manager secret.

    For example, to create a secret called `ELECTIONS_API_KEY` that relates to the `frontend-elections-api` secret in the AWS Secrets Manager (as per the previous example):

    ```
    - name: ELECTIONS_API_KEY
            valueFrom:
              secretKeyRef:
                name: frontend-elections-api
                key: key
    ```

1. Save the `.yaml` file and merge the change.

## Supporting information

The GOV.UK Kubernetes platform uses the [External Secrets Operator](https://external-secrets.io/) to manage secrets.

The operator reads information from external APIs and automatically injects the information values into a Kubernetes secret.

For more information, see the:

- [External Secrets Operator documentation](https://external-secrets.io/v0.5.8/guides-introduction/)
- [External Secrets Operator GitHub repository](https://github.com/external-secrets/external-secrets)
