---
title: How apps are deployed
weight: 42
last_reviewed_on: 2022-02-01
review_in: 6 months
---

# How apps are deployed

When you push an app to the GOV.UK Kubernetes platform, the Continuous Implementation / Continuous Deployment (CI / CD) process automatically deploys the app on the platform by:

- building and pushing an app's Docker image to the GOV.UK AWS elastic container repository (ECR)
- deploying the app container in GOV.UK AWS ECR

If the app does not deploy successfully, you can access the CI and CD logs to see what went wrong.

## Build and push an app's Docker image to GOV.UK AWS ECR

GOV.UK uses the GitHub Actions CI process to build and push an app's Docker image to the private GOV.UK production AWS elastic container repository (ECR).

This CI process is run automatically when a user:

- creates a new branch in GitHub for an app
- adds new commits to that branch
- merges the branch into the main branch

The exact steps in the CI process is specific to each app. This process is defined in the app's GitHub Actions workflow CI yaml file. This file is in the app's repository at `.github/workflows/ci.yaml`.

You can view the status of the GitHub Actions CI process at `https://github.com/alphagov/<application repo>/actions`. The workflow is called __Build and publish to ECR__.

An example CI process would running tests on the app, linting, and building artifacts for libraries released to other platforms.

When a user merges the branch into the main branch on GitHub, GitHub Actions tags that merge commit with a release tag.

Release tags are sequential, and the release numbers are incremented with every merge into the main branch. An example release tag is `release_3832.`

When the merge is complete, GitHub Actions builds and publishes the app Docker image, and pushes that image to AWS ECR. GitHub Actions also tags the image with the same release number.

## Deploy the app container in AWS ECR

Once the app Docker image is in AWS ECR, the Continuous Deployment (CD) process:

- detects this new image from the new release tag
- builds the app container from the image

___what actually does this? argocd?___

Once the CD process has built the app container, the CD process then updates the image tag within the [GOV.UK Helm chart value file for the integration environment](https://github.com/alphagov/govuk-helm-charts/blob/main/charts/argocd-apps/values-integration.yaml) by writing a new commit to the GOV.UK Helm chart repo.

When [ArgoCD](https://argo-cd.readthedocs.io/en/stable/) detects this change, it deploys the new image tag to Kubernetes. ArgoCD then updates the app running in the Kubernetes integration environment to use the container with the latest image tag.

Once the app is updated to use the latest image tag, ArgoCD runs smoke tests to check that the updated app is working as expected in the integration environment.

___what actually runs smoke tests??___

If the smoke tests pass successfully, ArgoCD repeats this process for the staging environment, and then the production environment.

Join the [#govuk-deploy-alerts Slack channel](https://gds.slack.com/archives/C01EE7US9R6) to get a notification when an app is deployed and whether the deployment succeeded or failed.

If your app deployment failed, you should check the ArgoCD logs to see why.

## Check the ArgoCD logs

You must sign into ArgoCD to view the ArgoCD logs.

The environment you need to sign into depends on where the app deployment failed.

### Check the ArgoCD integration environment

If your app deployment failed in integration, sign into the [ArgoCD integration environment](https://argo.eks.integration.govuk.digital/) using your GitHub account.

To sign into integration, your GitHub account must be part of the [GOV.UK team on alphagov](https://github.com/orgs/alphagov/teams/gov-uk).

### Check the ArgoCD staging environment

If your app deployment failed in integration, sign into the [ArgoCD staging environment](https://argo.eks.staging.govuk.digital/) using your GitHub account.

To sign into staging, your GitHub account must be ??????.

### Check the ArgoCD production environment

If your app deployment failed in production, sign into the [ArgoCD production environment](https://argo.eks.production.govuk.digital/) using your GitHub account.

To sign into production, your GitHub account must be part of the [GOV.UK production team on alphagov](https://github.com/orgs/alphagov/teams/gov-uk-production).




Sean to check these










most common use case
app already set up

deploy apps
if everything works well, then devs wont have any action to take

deployments
how deployments work on gov.uk
once a new image is built and pushed, auto deployed in integration, tests are run, if tests pass, then auto deploy into staging and production

if a deployment fails, this is where you can go and see what failed
in those circumstances, you would want to access the pipelines
troubleshoot

how do deployments work?

CI process

apps within gov.uk have CI enabled
typically, CI runs a set of tests, linting, builds artifacts (including container) for libraries released to other platforms, containers etc

workflow defined within each app repo - see existing docs





With GitHub Actions, we can now automatically build and publish our docker image to our private GOV.UK production AWS Elastic Container Repository.

The GitHub Actions workflow CI yaml file can be found within each repository in the following location: .github/workflows/ci.yaml

When a user merges a branch to main, the GitHub Action Workflows will be triggered, the defined job within the ci.yaml file will then start.

Within the job there are steps which will checkout the code, build a new Docker image and then push that new Docker image to GOV.UK production AWS ECR.

Each new image will be tagged with merge commit GitHub simple hashing algorithm (SHA).

You can view the status of GitHub Actions CI on https://github.com/alphagov/<application repo>/actions. The workflow is named Build and publish to ECR.



if there's an issue e.g. tests fails
dev wants to see what went wrong
in github actions, dev should be able to look at CI workflow for previous commit
github logs will have logs for that run, so dev should be able to see what when run
dev fixes on local machine and then push and it should pass
in github actions, you should also be able to rerun the github actions workflow

CD process
got the built container in ECR, want to deploy
deployment should be automatic
CD system should detect a new image with a new release tag
image is the blueprint from which you make containers
CD builds containers from image blueprint
Once there is a new image with a new release tag in ECR
A tbc process will update the image tag (release_3832) within the gov.uk helm chart value file for integration
will do that by writing a new commit to the gov.uk helm chart repo - https://github.com/alphagov/govuk-helm-charts/blob/main/charts/argocd-apps/values-integration.yaml
when that process commits, argocd will detect a change in the configuration, and will deploy the new image tag to kubernetes, and try to sync so the app running in kubernetes will be using the image tag just updated
if successfully deployed by argocd
then a tbc process will run smoke tests to check high level intergration of updated app
if smoke tests are successful, then same or similar process to update the image tag (release_3832) within the gov.uk helm chart value file for staging
argocd detects config change, deploys new image, updates app
on successful deploy, triggers smoke tests, if successful, then
rinse and repeat for production
nothing happens once smoke tests passed in production

how do we know if success or failure?
slack channel - #govuk-deploy-alerts - https://gds.slack.com/archives/C01EE7US9R6
send notifications every time a new app is deployed, and will say if failure
further detail TBC
every dev should have access to this slack channel

If failure?
First, look at argocd logs
Sign into argocd using your github account wthin the alphagov org
be able to log into argocd integration environment, using github account that is part of govuk team
be able to log into argocd production environment, you will need to be a member of govuk production team
https://docs.publishing.service.gov.uk/manual/rules-for-getting-production-access.html
argocd integration - https://argo.eks.integration.govuk.digital/
argocd production - https://argo.eks.production.govuk.digital/
staging as well
notification of deployment failure will also say in which environment it failed
e.g. if failed in staging, go to logs in staging environment
deployment may fail if smoke test failed
Sean to check these





# Access CI/CD pipelines

## Github actions (CI)

With GitHub Actions, we can now automatically build and publish our docker image to our private GOV.UK production AWS Elastic Container Repository.

The GitHub Actions workflow CI yaml file can be found within each repository in the following location: `.github/workflows/ci.yaml`

When a user merges a branch to main, the GitHub Action Workflows will be triggered, the defined job within the ci.yaml file will then start.
Within the job there are steps which will checkout the code, build a new Docker image and then push that new Docker image to GOV.UK production AWS Elastic Container Repository.
Each new image will be tagged with merge commit GitHub simple hashing algorithm (SHA).

You can view the status of GitHub Actions CI on `https://github.com/alphagov/<application repo>/actions`. The workflow is named `Build and publish to ECR`.

### Sensitive data

AWS credentials are stored as Github Organisation level secrets and have been made available to individual repos. If a new repo requires access to secrets, please [contact the Replatforming team on Slack](https://gds.slack.com/archives/C013F737737).

See the [documentation on GitHub Actions](https://docs.github.com/en/actions) for more information.

## ArgoCD (CD)

The GOV.UK Kubernetes Platform provides an [ArgoCD] instance for continuous
delivery of applications to the cluster.

ArgoCD is a declarative, GitOps continuous delivery tool for Kubernetes.
ArgoCD will replace the feature set currently provided by Deploy Jenkins.

### Access the ArgoCD integration instance

NOTE: In future we will use our Google Accounts for Single Sign-On (SSO) to Argo.
Our MVP for user testing uses a shared username and password.

1. Authenticate to the Kubernetes cluster (see [getting access to the cluster])
2. Acquire the password for Argo:

    ```sh
    kubectl -n cluster-services get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo
    ```

3. Navigate to [ArgoCD (Integration)][argo-integration] and sign in using the
  username `admin` and the password acquired from the previous step.

[ArgoCD]: https://argo-cd.readthedocs.io/en/stable/
[getting access to the cluster]: #getting-access-to-the-cluster
[argo-integration]: https://argo.eks.integration.govuk.digital/

## Argo Workflows

[Argo Workflows] is used in our GOV.UK Kubernetes Platform to provide the ability to
run tasks in a Directed Acyclic Graph (DAG) similar to what Concourse offered.

### Access the Argo Workflows integration instance

NOTE: In future we will use our Google Accounts for Single Sign-On (SSO) to Argo.
Our MVP for user testing uses a bearer token.

1. Authenticate to the Kubernetes cluster (see [getting access to the cluster])
2. Acquire the bearer token for [Argo Workflows]:

    ```sh
    argo auth token
    ```

3. Navigate to [Argo Workflows (Integration)][argo-workflows-integration] and sign in using the
  bearer token.
[argo-workflows-integration]: https://argo-workflows.eks.integration.govuk.digital/
