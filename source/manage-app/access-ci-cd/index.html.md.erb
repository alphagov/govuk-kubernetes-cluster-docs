---
title: Access CI/CD
weight: 42
last_reviewed_on: 2022-02-01
review_in: 6 months
---

most common use case
app already set up

deploy apps
if everything works well, then devs wont have any action to take

deployments
how deployments work on gov.uk
once a new image is built and pushed, auto deployed in integration, tests are run, if tests pass, then auto deploy into staging and production

if a deployment fails, this is where you can go and see what failed
in those circumstances, you would want to access the pipelines
troubleshoot

how do deployments work?

CI process
automated process, no manual action needed
apps within gov.uk have CI enabled
typically, CI runs a set of tests, linting, builds artifacts (including container) for libraries released to other platforms, containers etc
gov.uk run CI platform using github actions
workflow defined within each app repo - see existing docs
CI tasks differ between apps
CI run whenever a new branch is created in github and when new commits are added to any of those branches
Steps within CI will have to be passed before dev csan merge branch to main
when merging, CI will run again
If successful, extra bit of CI for main branch, that will...
Extra step for this platform, separate github action that will auto run after CI
build and push the container to AWS ECR
also on a merge of PR into main, other thing that happens is that github actions tag that new commit into the main branch with a release tag
the release tags are sequential - release_3832
numbers are incremented with every release into main
once new release tag, then we build and publish container image, and it gets pushed to ECR
the image pushed is also tagged with same release number
CI builds image

if there's an issue e.g. tests fails
dev wants to see what went wrong
in github actions, dev should be able to look at CI workflow for previous commit
github logs will have logs for that run, so dev should be able to see what when run
dev fixes on local machine and then push and it should pass
in github actions, you should also be able to rerun the github actions workflow

CD process
got the built container in ECR, want to deploy
deployment should be automatic
CD system should detect a new image with a new release tag
image is the blueprint from which you make containers
CD builds containers from image blueprint
Once there is a new image with a new release tag in ECR
A tbc process will update the image tag (release_3832) within the gov.uk helm chart value file for integration
will do that by writing a new commit to the gov.uk helm chart repo - https://github.com/alphagov/govuk-helm-charts/blob/main/charts/argocd-apps/values-integration.yaml
when that process commits, argocd will detect a change in the configuration, and will deploy the new image tag to kubernetes, and try to sync so the app running in kubernetes will be using the image tag just updated
if successfully deployed by argocd
then a tbc process will run smoke tests to check high level intergration of updated app
if smoke tests are successful, then same or similar process to update the image tag (release_3832) within the gov.uk helm chart value file for staging
argocd detects config change, deploys new image, updates app
on successful deploy, triggers smoke tests, if successful, then
rinse and repeat for production
nothing happens once smoke tests passed in production

how do we know if success or failure?
slack channel - #govuk-deploy-alerts - https://gds.slack.com/archives/C01EE7US9R6
send notifications every time a new app is deployed, and will say if failure
further detail TBC
every dev should have access to this slack channel

If failure?
First, look at argocd logs
Sign into argocd using your github account wthin the alphagov org
be able to log into argocd integration environment, using github account that is part of govuk team
be able to log into argocd production environment, you will need to be a member of govuk production team
https://docs.publishing.service.gov.uk/manual/rules-for-getting-production-access.html
argocd integration - https://argo.eks.integration.govuk.digital/
argocd production - https://argo.eks.production.govuk.digital/
staging as well
notification of deployment failure will also say in which environment it failed
e.g. if failed in staging, go to logs in staging environment
deployment may fail if smoke test failed
Sean to check these





# Access CI/CD pipelines

## Github actions (CI)

With GitHub Actions, we can now automatically build and publish our docker image to our private GOV.UK production AWS Elastic Container Repository.

The GitHub Actions workflow CI yaml file can be found within each repository in the following location: `.github/workflows/ci.yaml`

When a user merges a branch to main, the GitHub Action Workflows will be triggered, the defined job within the ci.yaml file will then start.
Within the job there are steps which will checkout the code, build a new Docker image and then push that new Docker image to GOV.UK production AWS Elastic Container Repository.
Each new image will be tagged with merge commit GitHub simple hashing algorithm (SHA).

You can view the status of GitHub Actions CI on `https://github.com/alphagov/<application repo>/actions`. The workflow is named `Build and publish to ECR`.

### Sensitive data

AWS credentials are stored as Github Organisation level secrets and have been made available to individual repos. If a new repo requires access to secrets, please [contact the Replatforming team on Slack](https://gds.slack.com/archives/C013F737737).

See the [documentation on GitHub Actions](https://docs.github.com/en/actions) for more information.

## ArgoCD (CD)

The GOV.UK Kubernetes Platform provides an [ArgoCD] instance for continuous
delivery of applications to the cluster.

ArgoCD is a declarative, GitOps continuous delivery tool for Kubernetes.
ArgoCD will replace the feature set currently provided by Deploy Jenkins.

### Access the ArgoCD integration instance

NOTE: In future we will use our Google Accounts for Single Sign-On (SSO) to Argo.
Our MVP for user testing uses a shared username and password.

1. Authenticate to the Kubernetes cluster (see [getting access to the cluster])
2. Acquire the password for Argo:

    ```sh
    kubectl -n cluster-services get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo
    ```

3. Navigate to [ArgoCD (Integration)][argo-integration] and sign in using the
  username `admin` and the password acquired from the previous step.

[ArgoCD]: https://argo-cd.readthedocs.io/en/stable/
[getting access to the cluster]: #getting-access-to-the-cluster
[argo-integration]: https://argo.eks.integration.govuk.digital/

## Argo Workflows

[Argo Workflows] is used in our GOV.UK Kubernetes Platform to provide the ability to
run tasks in a Directed Acyclic Graph (DAG) similar to what Concourse offered.

### Access the Argo Workflows integration instance

NOTE: In future we will use our Google Accounts for Single Sign-On (SSO) to Argo.
Our MVP for user testing uses a bearer token.

1. Authenticate to the Kubernetes cluster (see [getting access to the cluster])
2. Acquire the bearer token for [Argo Workflows]:

    ```sh
    argo auth token
    ```

3. Navigate to [Argo Workflows (Integration)][argo-workflows-integration] and sign in using the
  bearer token.
[argo-workflows-integration]: https://argo-workflows.eks.integration.govuk.digital/
