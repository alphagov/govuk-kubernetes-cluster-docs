---
title: How apps are deployed
weight: 42
last_reviewed_on: 2022-02-01
review_in: 6 months
---

# How apps are deployed

How deployments work

A GOV.UK app that we want to run somewhere

We deploy the app to our gov.uk kubernetes cluster / platform as a set of kubernetes resources

Those resources are bits of configuration that tell K8s how to run the app in the cluster

We manage that set of resources using Helm

We have a Helm chart that specifies the name of a group of k8s resources
e.g. a pod, a service, a load balancer (3 resources) you can use a heml chart to group them together
a helm chart defines a group of k8s resources
helm (the app) is the thing that deploys those resources to k8s

the helm charts for the gov.uk apps are specified in the gov.uk helm chat repo
https://github.com/alphagov/govuk-helm-charts

This is where argocd comes in
Argocd is a tool that keeps everything thats defined in the helm charts in sync with whats in k8s
argocd is a tool that continuously monitors k8s and the govuk-helm-charts repo and makes sure that the resources that are in those two places are in sync

your source of truth is the govuk-helm-charts repo
forcing devs to make changes to the repo rather than any other way

argocd, when its updating resources in k8s, its using helm under the hood to apply those changes and deploy those helm charts



how does argocd define an app?

terminology: argo application

govuk-helm-charts is a repo full of helm charts
we need to tell argocd what helm charts apply to what gov.uk apps
there is an argo application that represents each of the gov.uk apps
each of those argo apps is a representation of the helm chart and k8s resource - what argo has to keep in sync
each of those argo apps is managed by an argo app in itself - an app of apps - a nested structure
a precursor to how deploylments work

you make a change to the helm chart
argocd detects this config change and attempts to sync the k8s resources with the changes in the cluster

when we say "deploy an app"

if you update the image tag in the helm chart
argocd will notice this difference and try to sync the resources in the k8s cluster with what is in the helm chart in the helm charts repo
pre deployment tasks as part of pre sync hook? or part of k8s deployment itself? Sean to check and msg me.
argocd will change the version of the code that is running in k8s cluster
argocd is updating the deployment resource in k8s with the new image tag
that will trigger k8s app to do the deployment - link to k8s deployment docs - https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#updating-a-deployment
k8s will deploy the containers etc - keep brief and link to docs

Once app is deployed, argocd runs a post sync hook which will run the smokey tests for the app - smokey is the tool, smoke tests are the category
https://github.com/alphagov/smokey

https://github.com/alphagov/govuk-helm-charts/tree/main/charts/govuk-rails-app

you cna do this manually, but CD means that you dont need to
CD - after we create a new release of the app
a release is a tagged commit that represents a deployable version of the code for the gov.uk app
when there is a new release, it's auto deployed to integration, which triggers smokey tests
if the smokey tests are successful in integration, that release is then promoted to staging which triggers further smokey tests
if the smokey tests are successful in staging, that release is then promoted to production which triggers further smokey tests
if smokey tests pass in production, then app is deployed
if smokey tests fail in integration or staging, then app wont go to next env

when a new release is created, the CI will build the new image and push that new image to AWS ECR
last thing that CI will do is update the image tag value in the govuk helm chat repo integration folder
for the new release - https://github.com/alphagov/govuk-helm-charts/tree/main/charts/argocd-apps/image-tags/integration
argocd will notice this is different and then the deployment process starts

if smokey tests are successful, will trigger an argo workflow to update the image tag value for the next env, staging - https://github.com/alphagov/govuk-helm-charts/tree/main/charts/argocd-apps/image-tags/staging
argocd notices this change and then identical process

and then again for production
with production, there is no further argo workflow as no further environments to promote to

the processes that update the image tag value, they will create a branch and merge that branch into master branch for govuk helm chart repo
there are no PRs or reviews for that - no PR associated with updating the image tag values in the govuk helm chat repo

















When you deploy an app to the GOV.UK Kubernetes platform, the Continuous Implementation / Continuous Deployment (CI / CD) process automatically deploys the app on the platform by:

- building and pushing an app's Docker image to the GOV.UK AWS Elastic Container Repository (ECR)
- deploying the app container in GOV.UK AWS Elastic Kubernetes Service (EKS)

___Is it ECR or EKS????___

If the app does not deploy successfully, you can access the CI and CD logs to see what went wrong.

## Build and push an app's Docker image to GOV.UK AWS ECR

GOV.UK uses the GitHub Actions CI process to build and push an app's Docker image to the private GOV.UK production AWS elastic container repository (ECR).

This CI process is run automatically when a user:

- creates a new branch in GitHub for an app
- adds new commits to that branch
- merges the branch into the main branch

The exact steps in the CI process is specific to each app. This process is defined in the app's GitHub Actions workflow CI yaml file. This file is in the app's repository at `.github/workflows/ci.yaml`.

You can view the status of the GitHub Actions CI process at `https://github.com/alphagov/<application repo>/actions`. The workflow is called __Build and publish to ECR__.

An example CI process would be running tests on the app, linting, and building artifacts for libraries released to other platforms.

When a user merges the branch into the main branch on GitHub, GitHub Actions tags that merge commit with a release tag.

Release tags are sequential, and the release numbers are incremented with every merge into the main branch. An example release tag is `release_3832.`

When the merge is complete, GitHub Actions:

- builds and publishes the app Docker image
- pushes the app Docker image to AWS ECR
- tags the image with the same release tag

## Deploy the app container in AWS EKS

[Argo CD](https://argo-cd.readthedocs.io/en/stable/) is a continuous deployment (CD) tool for Kubernetes. GOV.UK uses Argo CD to run its CD process for the GOV.UK Kubernetes platform.

Once the app Docker image is in AWS ECR, an automatic process within AWS ECR detects this new image from the new release tag and builds the app container from the image.

This process then updates the image tag within the [GOV.UK Helm chart value file for the integration environment](https://github.com/alphagov/govuk-helm-charts/blob/main/charts/argocd-apps/values-integration.yaml) by writing a new commit to the GOV.UK Helm chart repo.

Argo CD will then detect the difference between the app image tags in the Helm chart repo and the Kubernetes integration environment.

Argo CD deploys the new image tag to Kubernetes, and updates the app running in the Kubernetes integration environment to use the container with the latest image tag.

Once the app is updated to use the latest image tag, Argo CD runs smoke tests to check that the updated app is working as expected in the integration environment.

If the smoke tests pass successfully, Argo CD repeats this process for the staging environment, and then the production environment.

Join the [#govuk-deploy-alerts Slack channel](https://gds.slack.com/archives/C01EE7US9R6) to get a notification when an app is deployed and whether the deployment succeeded or failed.

If your app deployment failed, you should check the Argo CD logs to see why.

## Check the Argo CD logs

You must sign into Argo CD to view the Argo CD logs.

The environment you need to sign into depends on where the app deployment failed.

### Check the Argo CD integration environment

If your app deployment failed in integration, sign into the [Argo CD integration environment](https://argo.eks.integration.govuk.digital/) using your GitHub account.

To sign into integration, your GitHub account must be part of the [GOV.UK team on alphagov](https://github.com/orgs/alphagov/teams/gov-uk).

### Check the Argo CD staging and production environments

If your app deployment failed in integration or production, sign into the [Argo CD staging environment](https://argo.eks.staging.govuk.digital/) or [Argo CD production environment](https://argo.eks.production.govuk.digital/) using your GitHub account.

To sign into staging or production, your GitHub account must be part of the [GOV.UK production team on alphagov](https://github.com/orgs/alphagov/teams/gov-uk-production).

See the [documentation on getting production access](https://docs.publishing.service.gov.uk/manual/rules-for-getting-production-access.html) for more information.
