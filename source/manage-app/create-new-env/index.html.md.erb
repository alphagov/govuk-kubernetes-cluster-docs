---
title: Create a new test or production environment
weight: 49
last_reviewed_on: 2022-07-01
review_in: 6 months
---

# Create a new test or production environment

You can create a new test or production environment on the GOV.UK Kubernetes platform.

You create a new environment to, for example, work on new functionality or resources for the platform.

You do not / cannot / must not create a new staging or integration environment because __REASONS__.

To create a new test or production environment, you must:

- complete the prerequisites
- create the external secrets
- create a new empty environment
- deploy the Terraform modules
- create the Signon API token

## Before you start

Before creating a new test or production environment, you must:

- [request a new AWS account](https://gds-request-an-aws-account.cloudapps.digital/)
- [install the AWS-CLI](https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html)
- [install Terraform](https://www.terraform.io/downloads)

__Configure GDS CLI to work with new env?__

__what about the variables file?__

## Create external secrets

https://github.com/alphagov/govuk-helm-charts/tree/main/charts/govuk-apps-conf/templates/external-secrets
folder of external secrets

create the external secrets for the new env

different methods for each one - to come back to

## Create a new empty environment

`ENV=test` - __do i need to define this first????__

1. Run the following in the command line to create the Terraform state file and store it in an S3 bucket in your new AWS account:

    ```
    gds aws govuk-${ENV?}-admin -- terraform init -backend-config=${ENV?}.backend -reconfigure -upgrade
    ```

1. Update your AWS account to match the Terraform state file and create the new empty environment:

    ```
    gds aws govuk-${ENV?}-admin -- terraform apply -var-file ../variables/common.tfvars -var-file ../variables/${ENV?}/common.tfvars
    ```

## Deploy the Terraform modules

Deploy the root Terraform modules in the following order.

### 1. Deploy the `ecr` module

The AWS elastic container registry (ECR) stores container images for the GOV.UK Kubernetes platform.

The [`ecr` module](https://github.com/alphagov/govuk-infrastructure/tree/main/terraform/deployments/ecr) creates the ECR. __The entire ECR? An instance of it for GOV.UK K8s?__ The ECR is hosted in the GOV.UK production AWS account.

Run the following to deploy the `ecr` module:

__anywhere in particular on your local machine?__
__why arent we using the test code???__

```
gds aws govuk-production-admin -- \
  terraform init -backend-config production.backend -reconfigure -upgrade

gds aws govuk-production-admin -- \
  terraform apply -var-file ../variables/production/ecr.tfvars
```

### 2. Deploy the `cluster-infrastructure` module

The [`cluster-infrastructure` module](https://github.com/alphagov/govuk-infrastructure/tree/main/terraform/deployments/cluster-infrastructure) creates the AWS resources for the GOV.UK Kubernetes platform [Elastic Kubernetes Service(EKS) cluster](https://kubernetes.io/docs/concepts/overview/components/).

1. In the command line, go to `govuk-infrastructure/terraform/deployments/cluster-infrastructure/` on your local machine.

1. Run the following to create the AWS resources for the EKS cluster:

    ```
    gds aws govuk-production-admin -- \
      terraform init -backend-config production.backend -reconfigure -upgrade

    gds aws govuk-production-admin -- \
      terraform apply
    ```

### 3. Delete the `aws-auth` configmap

__Do I need to do this now? It doesnt fit in with this section__

One of the AWS-managed EKS addons creates a default `aws-auth` configmap. You must either import this configmap into Terraform or delete it. Our preferred solution is to delete the configmap.

Run the following to delete the `aws-auth` configmap

```
gds aws govuk-${ENV?}-admin -- aws eks update-kubeconfig --name govuk && kubectl -n kube-system delete cm aws-auth
```

### 4. Deploy the `govuk-publishing-infrastructure` module

The `govuk-publishing-infrastructure` module creates and manages AWS resources for the GOV.UK apps where we are not yet able to manage those resources using Kubernetes.

1. In the command line, go to `govuk-infrastructure/terraform/deployments/govuk-publishing-infrastructure/` on your local machine.

1. Run the following to deploy the `govuk-publishing-infrastructure` module:

    ```
    gds aws govuk-production-admin -- \
      terraform init -backend-config production.backend -reconfigure -upgrade

    gds aws govuk-production-admin -- \
      terraform apply
    ```

### 5. Deploy the `cluster-services`module

The [`cluster-services` module](https://github.com/alphagov/govuk-infrastructure/blob/main/terraform/deployments/cluster-services) deploys the base services __what are "base" services?__ into the cluster.

1. In the command line, go to `govuk-infrastructure/terraform/deployments/cluster-services/` on your local machine.

1. Run the following to deploy the `cluster-services` module:

    ```
    gds aws govuk-production-admin -- \
      terraform init -backend-config production.backend -reconfigure -upgrade

    gds aws govuk-production-admin -- \
      terraform apply
    ```

## Create the Signon API token

Run the following to create the [Signon API token](https://github.com/alphagov/govuk-infrastructure/blob/main/docs/signon-secrets.md) as a Kubernetes secret:

```
kubectl -n apps create secret generic signon-auth-token --from-literal=token=$(openssl rand -base64 40)
```

This allows Signon-resources to create or export tokens from Signon.

You have successfully created a new test or production environment on the GOV.UK Kubernetes platform.

__how do I know it's a success?__ 
