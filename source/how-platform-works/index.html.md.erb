---
title: How the platform works
weight: 60
last_reviewed_on: 2022-02-01
review_in: 6 months
---

# How the platform works

Kubernetes uses the declarative state model. Kubernetes users define their applications in terms of the desired end state.

This differs from an imperative model, where users define the sequential steps to achieve a running application.

For example, in a declarative state model, the user defines the following end state:

- container `hello-world` with tag `v1` should be running
- the `hello-world` container should expose port 80
- a load balancer routing to port 80 on the container should exist

Whereas, in an imperative model, the user defines the following sequential steps:

1. Pull the `hello-world` container with tag `v1`.
2. Start the `hello-world` container with port 80 exposed.
3. Create a load balancer.
4. Create a load balancer routing rule pointing to port 80 on the container.

In the Kubernetes declarative model, internal Kubernetes components called [controllers](https://kubernetes.io/docs/concepts/architecture/controller/) handle the details of transitioning an application from the current state to the declared desired state on your behalf.

See [Imperative vs Declarative](https://dominik-tornow.medium.com/imperative-vs-declarative-8abc7dcae82e) for a more detailed comparison of the two models.

## Kubernetes objects

The Kubernetes API supports many [object types](https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/) representing the state of component parts of an application.

The following major resource types are used in most applications:

* [`Pod`](https://kubernetes.io/docs/concepts/workloads/pods/) - a group of one or more containers
* [`Deployment`](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/) - one or more replicas of a `Pod`, and an associated [deployment strategy](https://www.weave.works/blog/kubernetes-deployment-strategies)
* [`Service`](https://kubernetes.io/docs/concepts/services-networking/service/) - a means of exposing `Pod` or `Deployment` objects as a network service using a [DNS](https://en.wikipedia.org/wiki/Domain_Name_System) name
* [`Ingress`](https://kubernetes.io/docs/concepts/services-networking/ingress/) - a means of exposing `Service` objects externally via a load balancer, with associated [TLS](https://en.wikipedia.org/wiki/Transport_Layer_Security) certificates and [DNS](https://en.wikipedia.org/wiki/Domain_Name_System) names
* [`ConfigMap`](https://kubernetes.io/docs/concepts/configuration/configmap/) - a collection of configuration key/value pairs, commonly used to provide environment variables to Pod containers
* [`Secrets`](https://kubernetes.io/docs/concepts/configuration/secret/) - a collection of sensitive key/value pairs, commonly used to provide environment variables to containers

## Custom Kubernetes objects

The GOV.UK Kubernetes platform includes the following third party API objects and controllers to allow AWS services to be used through the Kubernetes API:

* [external-secrets](https://external-secrets.io) - stores secrets in [AWS Secrets Manager](https://aws.amazon.com/secrets-manager/), and makes them available to applications as standard Kubernetes `Secret` objects
* [AWS Load Balancer Controller](https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.3/) - provides and manages AWS Load Balancers to fulfil `Ingress` objects' specifications
* [external-dns](https://github.com/kubernetes-sigs/external-dns) - creates and manages [DNS](https://en.wikipedia.org/wiki/Domain_Name_System) records in [AWS Route 53](https://aws.amazon.com/route53/) to fulfil `Ingress` objects' specifications

## Security constraints in the AWS integration

The Kubernetes cluster interacts with AWS services to provide features like DNS, application load balancer (ALB) ingress, and Secret provisioning.

The following operators installed in the cluster integrate with AWS:

* the cluster uses the [external-secrets] operator to access secrets in AWS Secrets Manager and automatically injects the values as Kubernetes Secrets
* [external-dns] is a Kubernetes addon that configures public DNS servers (in our case AWS Route53) with information about exposed Kubernetes services to make them discoverable
* the [aws-load-balancer-controller] provisions AWS ALBs for Kubernetes Ingress resources and NLBs for Kubernetes Services.
* [cluster-autoscaler] manages AWS EC2 Auto Scaling Groups to ensure pods will not fail due to insufficient resources and nodes aren't underutilized.

[external-secrets]: https://github.com/external-secrets/external-secrets
[external-dns]: https://github.com/kubernetes-sigs/external-dns
[aws-load-balancer-controller]: https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.3/
[cluster-autoscaler]: https://github.com/kubernetes/autoscaler/tree/master/cluster-autoscaler

## Further information

For a brief introduction to what Kubernetes is all about, read this [comic][k8s-comic] from Google and watch this [Kubernetes concepts video][k8s-video].

You can also try the following courses:

* [Katacoda kubernetes course][] - In-browser, free (registration required), bite-sized Kubernetes lessons.
* [Pluralsight k8s course][]
* [Udacity k8s course][]

[k8s-comic]: https://cloud.google.com/kubernetes-engine/kubernetes-comic/
[k8s-video]: https://www.youtube.com/watch?v=IMOZCDhH7do
[Pluralsight k8s course]: https://www.pluralsight.com/courses/kubernetes-getting-started
[Udacity k8s course]: https://eu.udacity.com/course/scalable-microservices-with-kubernetes--ud615
[Katacoda kubernetes course]: https://www.katacoda.com/courses/kubernetes




architecture stuff would be for maintainers

eks docs - https://docs.aws.amazon.com/eks/latest/userguide/what-is-eks.html

kubernetes docs - https://kubernetes.io/docs/home/

https://training.linuxfoundation.org/training/introduction-to-kubernetes/ - free reading

should encourage people to go on the training course in their first year

what is different about this implementation?

https://training.linuxfoundation.org/training/kubernetes-for-developers/

put in getting started??

Custom kubernetes resources and controllers for our particular imnplementation
https://govuk-k8s-user-docs.publishing.service.gov.uk/how-platform-works/#custom-kubernetes-objects

Delete Further Information
rpelaced by background reading of above links

Delete content under How the platform works

Delete kubernetes objects section

The four things under https://govuk-k8s-user-docs.publishing.service.gov.uk/how-platform-works/#security-constraints-in-the-aws-integration are the interesting custom bits

Maybe can say something about how platform is configured using terraform modules
these modules exist, look in github repo here

Add storage-driver to the list of four under the sceurity... section
on the to do list for april - https://trello.com/c/Wz9dRNWA/607-create-gp3-storageclass
add documentation ticket for milestone 3



## GOV.UK Kubernetes platform cluster specific add-ons

We use the following cluster add-ons to manage external services like storage and secrets, specific to our implementation of kubernetes

external-secrets
external-dns
aws-load-balancer-controller
cluster-autoscaler
Dex - https://dexidp.io/


external-secrets

Stores secrets in AWS Secrets Manager, and makes them available to applications as standard Kubernetes Secret objects
add links
https://github.com/alphagov/govuk-infrastructure/tree/main/terraform/deployments/cluster-services

external-dns

creates dns records in aws route 53 for exposed kubernetes services

aws-load-balancer-controller

it's our ingress controller, it creates and manages AWS Load Balancers based on Ingress objects in the cluster

cluster-autoscaler

adds worker nodes to the cluster when the cluster is running low on capacity to ensure that there's enough capacity for pods to be scheduled
if there's too much spare capacity, it removes worker nodes
does this by controlled the aws ec2 auto scaling group for the managed node group

Dex

a federated identity provider which we use to manage single sign on to services in the cluster such as grafana dashboards and argo cd
connects things that you need to sign into to things that know if you're a authenticated user


### Authenticating users to the cluster

Authenticating users to the cluster when interacting with the cluster

AWS auth configmap
map between aws users and roles and kubernetes users and roles
https://github.com/alphagov/govuk-infrastructure/blob/main/terraform/deployments/cluster-services/aws_auth_configmap.tf
Generate the aws-auth ConfigMap, which defines the mapping between AWS IAM roles and k8s RoleBasedAccessControl (one of the permission systems in k8s)

users interacting with the cluser are auth'ed based on the mapping of the iam role to the k8s user
that mapping is defined in a configmap in the kube system namepsace called aws-auth
link to https://docs.aws.amazon.com/eks/latest/userguide/add-user-role.html

lists of authorised users are located here:
https://github.com/alphagov/govuk-aws-data/blob/master/data/infra-security/
anyone in the github gov.uk team can raise changes
if you need to change the list of auth'ed users, you do that here
the mapping is derived from this using terraform





how user auth works
authenticating a user to the cluster when interacting with the cluster
a configmap which maps aws iam principles to kubernetes


add something about the monitoring stack to the documentation tickets
